// <auto-generated />
using ConsoleApp1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConsoleApp1.Migrations
{
    [DbContext(typeof(hotelsContext))]
    partial class hotelsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConsoleApp1.Models.Должности", b =>
                {
                    b.Property<int>("КодДолжноти")
                        .HasColumnName("Код_должноти")
                        .HasColumnType("INT");

                    b.Property<int>("Наименование")
                        .HasColumnType("INT");

                    b.Property<int>("Обязанности")
                        .HasColumnType("INT");

                    b.Property<int>("Оклад")
                        .HasColumnType("INT");

                    b.Property<int>("Требования")
                        .HasColumnType("INT");

                    b.HasKey("КодДолжноти");

                    b.ToTable("Должности");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Клиенты", b =>
                {
                    b.Property<int>("ПаспортныеДанные")
                        .HasColumnName("Паспортные_данные")
                        .HasColumnType("INT");

                    b.Property<int>("ДатаВыезда")
                        .HasColumnName("Дата_выезда")
                        .HasColumnType("INT");

                    b.Property<int>("ДатаЗаселения")
                        .HasColumnName("Дата_заселения_")
                        .HasColumnType("INT");

                    b.Property<int>("КодНомера")
                        .HasColumnName("Код_номера")
                        .HasColumnType("INT");

                    b.Property<int>("КодСотрудника")
                        .HasColumnName("Код_сотрудника")
                        .HasColumnType("INT");

                    b.Property<int>("КодУслуги1")
                        .HasColumnName("Код_услуги_1")
                        .HasColumnType("INT");

                    b.Property<int>("КодУслуги2")
                        .HasColumnName("Код_услуги_2")
                        .HasColumnType("INT");

                    b.Property<int>("КодУслуги3")
                        .HasColumnName("Код_услуги_3")
                        .HasColumnType("INT");

                    b.Property<int>("Стоимость")
                        .HasColumnName("Стоимость_")
                        .HasColumnType("INT");

                    b.Property<int>("Фио")
                        .HasColumnName("ФИО")
                        .HasColumnType("INT");

                    b.HasKey("ПаспортныеДанные");

                    b.HasIndex("КодНомера")
                        .IsUnique();

                    b.HasIndex("КодСотрудника");

                    b.HasIndex("КодУслуги1");

                    b.HasIndex("КодУслуги2");

                    b.HasIndex("КодУслуги3");

                    b.ToTable("Клиенты");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Номера", b =>
                {
                    b.Property<int>("КодНомера")
                        .HasColumnName("Код_номера")
                        .HasColumnType("INT");

                    b.Property<int>("Вместимость")
                        .HasColumnName("Вместимость_")
                        .HasColumnType("INT");

                    b.Property<int>("Наименование")
                        .HasColumnType("INT");

                    b.Property<int>("Описание")
                        .HasColumnType("INT");

                    b.Property<int>("Стоимость")
                        .HasColumnType("INT");

                    b.HasKey("КодНомера");

                    b.ToTable("Номера");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Сотрудники", b =>
                {
                    b.Property<int>("КодСотрудника")
                        .HasColumnName("Код_сотрудника")
                        .HasColumnType("INT");

                    b.Property<int>("Адрес")
                        .HasColumnType("INT");

                    b.Property<int>("Возраст")
                        .HasColumnType("INT");

                    b.Property<int>("КодДолжноти")
                        .HasColumnName("Код_должноти")
                        .HasColumnType("INT");

                    b.Property<int>("ПаспортныеДанные")
                        .HasColumnName("Паспортные_данные")
                        .HasColumnType("INT");

                    b.Property<int>("Пол")
                        .HasColumnType("INT");

                    b.Property<int>("Фио")
                        .HasColumnName("ФИО")
                        .HasColumnType("INT");

                    b.HasKey("КодСотрудника");

                    b.HasIndex("КодДолжноти");

                    b.HasIndex("ПаспортныеДанные")
                        .IsUnique();

                    b.ToTable("Сотрудники");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Услуги", b =>
                {
                    b.Property<int>("КодУслуги")
                        .HasColumnName("Код_услуги")
                        .HasColumnType("INT");

                    b.Property<int>("Наименование")
                        .HasColumnName("Наименование_")
                        .HasColumnType("INT");

                    b.Property<int>("Описание")
                        .HasColumnType("INT");

                    b.Property<int>("Стоимость")
                        .HasColumnType("INT");

                    b.HasKey("КодУслуги");

                    b.ToTable("Услуги");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Клиенты", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Номера", "КодНомераNavigation")
                        .WithOne("Клиенты")
                        .HasForeignKey("ConsoleApp1.Models.Клиенты", "КодНомера")
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Models.Сотрудники", "КодСотрудникаNavigation")
                        .WithMany("Клиенты")
                        .HasForeignKey("КодСотрудника")
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Models.Услуги", "КодУслуги1Navigation")
                        .WithMany("КлиентыКодУслуги1Navigation")
                        .HasForeignKey("КодУслуги1")
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Models.Услуги", "КодУслуги2Navigation")
                        .WithMany("КлиентыКодУслуги2Navigation")
                        .HasForeignKey("КодУслуги2")
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Models.Услуги", "КодУслуги3Navigation")
                        .WithMany("КлиентыКодУслуги3Navigation")
                        .HasForeignKey("КодУслуги3")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.Models.Сотрудники", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Должности", "КодДолжнотиNavigation")
                        .WithMany("Сотрудники")
                        .HasForeignKey("КодДолжноти")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
